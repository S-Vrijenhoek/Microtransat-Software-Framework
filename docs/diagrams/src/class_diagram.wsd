@startuml Class Diagram

interface IClient
interface IModule
interface IModuleFactory
interface IDecisionTree
interface ISoftwareFramework
interface IReadableModule
interface IWriteableModule

class Client
class ModuleFactory
class DecisionTree
class SoftwareFramework
class Sensor
class Actuator
class Battery

IClient <|.. Client
IModule <|-- IReadableModule
IModule <|-- IWriteableModule
IReadableModule <|.. Sensor
IReadableModule <|.. Actuator
IReadableModule <|.. Battery
IWriteableModule <|.. Actuator
IModuleFactory <|.. ModuleFactory
IDecisionTree <|.. DecisionTree
ISoftwareFramework <|.. SoftwareFramework
SoftwareFramework - "0..*" IModule
SoftwareFramework -left- "1" IModuleFactory
SoftwareFramework -down- "1" IDecisionTree

interface IClient {
    - feedModuleData() : void
    - sendInstructions() : void
}

interface IModule {
    - id : string
    + getId() : string
}

interface IReadableModule {
    - data
    + getData()
}

interface IWriteableModule {
    - instruction
    + getInstruction()
    + setInstruction()
}

interface ISoftwareFramework {
    - setup() : void
    + getInstructions() : list
    + updateModuleData(id : string, data : float) : void
}

interface IModuleFactory {
    + createModules() : list
}

interface IDecisionTree {
    + createInstructions()
    - processModulesData()
}

note left of IModuleFactory::createModules
    Modules need to be defined
    inside a settings file.
end note

note right of IClient::feedModuleData 
    Feeds active CAN bus
    module data to 
    SoftwareFramework
end note

note right of IClient::sendInstructions 
    Sends instructions from
    SoftwareFramework back
    to CAN bus. 
end note

@enduml